<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的
	例如namespace="com.mapping.userMapper"就是com.mapping(包名)+userMapper(userMapper.xml文件去除后缀) -->
<mapper namespace="com.dao.IUserDAO">
    <!-- 在select标签中编写查询的SQL语句， 设置select标签的id属性为getUser，id属性值必须是唯一的，不能够重复
          使用parameterType属性指明查询时使用的参数类型，resultType属性指明查询返回的结果集类型
        resultType="com.model.User"就表示将查询结果封装成一个User类的对象返回
         User类就是userTable表所对应的实体类
    -->
    <sql id="select-include-permission">
        SELECT
        u.ID,
        u.USERNAME,
        u.PASSWORD,
        r.ID,
        r.NAME,
        p.ID,
        p.RESOURCECODE
        FROM
        usertable as u,
        roletable as r,
        permissiontable as p,
        permissionrole as pr,
        roleuser as ru
        WHERE
        u.ID = ru.USERID
        AND
        r.ID = ru.ROLEID
        AND
        p.ID = pr.PERMISSIONID
        AND
        r.ID = pr.ROLEID
    </sql>

    <select id="findUserByUsername" parameterType="string" resultMap="resultListUser">
        <include refid="select-include-permission" />
        AND u.USERNAME = #{username}
        <!-- select * from tbl_user u, tbl_role r, tbl_role_user tu
        where u.user_id = tu.user_id and r.role_id = tu.role_id
        and user_username=#{username} -->
    </select>
    <!-- 根据id查询得到一个user对象      -->
    <select id="selectById" parameterType="int" resultType="User">
        select * from userTable where id=#{id}
    </select>
    <!-- 返回list 的select 语句，注意 resultMap 的值是指向前面定义好的 -->
    <select id="selectUsers" resultMap="resultListUser">
        select * from userTable
    </select>
    <select id="selectByEmailAndPassword" resultMap="User">
        select * from userTable where email=#{email} and password=#{password}
    </select>
    <!--执行增加操作的SQL语句。id和parameterType分别与IUserOperation接口中的addUser方法的名字和
    参数类型一致。以#{name}的形式引用Student参数的name属性，MyBatis将使用反射读取Student参数
    的此属性。#{name}中name大小写敏感。引用其他的gender等属性与此一致。seGeneratedKeys设置
    为"true"表明要MyBatis获取由数据库自动生成的主键；keyProperty="id"指定把获取到的主键值注入
    到Student的id属性-->
    <insert id="save" parameterType="User"
            useGeneratedKeys="true" keyProperty="id">
        insert into userTable(id,userName,createTime,email,mobile,phone,password)  values(#{id},#{userName},#{createTime},#{email},#{mobile},#{phone},#{password})
    </insert>
    <update id="update" parameterType="User">
        update userTable set username=#{username},email=#{email},mobile=#{mobile},phone=#{phone},password=#{password} where id=#{id}
    </update>
    <delete id="delete" parameterType="int">
        delete from userTable where id=#{id}
    </delete>
    <delete id="delete" parameterType="User">
        delete from userTable where id=#{id}
    </delete>
    <!-- 为了返回list 类型而定义的returnMap -->
    <resultMap type="User" id="resultListUser">
        <id column="id" property="id"/>
        <result column="userName" property="userName"/>
        <result column="createTime" property="createTime"/>
        <result column="mobile" property="mobile"/>
        <result column="phone" property="phone"/>
        <result column="email" property="email"/>
        <result column="password" property="password"/>
        <!-- 进行 多表关联插叙，先关联user和role -->
        <collection property="roleSet" column="roleid" ofType="com.jay.demo.bean.Role">
            <id property="id" column="ROLE_ID"/>
            <result property="name" column="ROLE_NAME"/>
            <!-- 再在role中关联role和permission -->
            <collection property="permissionSet" column="permissionid" ofType="com.jay.demo.bean.Permission">
                <id property="id" column="permission_id"/>
                <result property="name" column="permission_name"/>
            </collection>
        </collection>
    </resultMap>
</mapper>